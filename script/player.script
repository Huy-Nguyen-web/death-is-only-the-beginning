local platypus = require "platypus.platypus"
local jump_buff_time = 0.5
local coyote_time = 0.5
local jump_buff = false
local coyote = false
local on_ground = false
go.property("lives_count", 5)
local lives_lost = false

local function draw_line(from, to)
	msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(1,0,0,1) })
end


function init(self)
	msg.post(".", "acquire_input_focus")
	self.platypus = platypus.create({
		collisions = {
			groups = {
				[hash("floor")] = platypus.DIR_ALL,
				[hash("obstacle")] = platypus.DIR_ALL,
				[hash("corpse")] = platypus.DIR_ALL
			},
			left = 4,
			right = 4,
			top = 6,
			bottom = 7,
		},
		-- debug = true,
		reparent = false,
		gravity = -500
	})
	start_pos = go.get_position()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- self.platypus.update(dt)
	self.platypus.update(dt)
	-- Add jump buffering
	if jump_buff then
		jump_buff_time = jump_buff_time - dt
		if self.platypus.has_ground_contact() then
			if jump_buff_time > 0 then
				self.platypus.jump(250)
				-- reset the timer
				jump_buff = false
				jump_buff_time = 0.5
			else
				-- reset the timer
				jump_buff = false
				jump_buff_time = 0.5
			end
		end
	end

	-- raycasting for obstacle
	local from = go.get_position()
	local to = vmath.vector3(from.x, from.y - 8, from.z)
	local obstacle_detect = physics.raycast(from, to, {hash("obstacle")})
	draw_line(from, to)
	if obstacle_detect then
		--spawn the corpse
		factory.create("/corpse_factory#factory", go.get_position())
		
		-- reset the player position and spawn the corpse
		go.set_position(start_pos)
		self.lives_count = self.lives_count - 1
		print(self.lives_count)
		
	end
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message)
	if message_id == hash("contact_point_response") then
		if message.group == hash("door") then
			print("on door")
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		self.platypus.left(100)
	elseif action_id == hash("right") then
		self.platypus.right(100)
	end
	if action_id == hash("jump") then
		if action.pressed then
			jump_buff = true
		elseif action.released then
			self.platypus.abort_jump(0.5)
		end
	end
end
